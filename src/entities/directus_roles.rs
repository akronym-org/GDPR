//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "directus_roles")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub icon: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub ip_access: Option<String>,
    pub enforce_tfa: bool,
    pub admin_access: bool,
    pub app_access: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::directus_permissions::Entity")]
    DirectusPermissions,
    #[sea_orm(has_many = "super::directus_presets::Entity")]
    DirectusPresets,
    #[sea_orm(has_many = "super::directus_shares::Entity")]
    DirectusShares,
    #[sea_orm(has_many = "super::directus_users::Entity")]
    DirectusUsers,
}

impl Related<super::directus_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectusPermissions.def()
    }
}

impl Related<super::directus_presets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectusPresets.def()
    }
}

impl Related<super::directus_shares::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectusShares.def()
    }
}

impl Related<super::directus_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectusUsers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
