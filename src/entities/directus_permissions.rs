//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "directus_permissions")]
pub struct Model {
    #[serde(skip_serializing)]
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(select_as = "text", save_as = "uuid")]
    pub role: Option<String>,
    #[serde(skip_serializing)]
    pub collection: String,
    pub action: String,
    pub permissions: Option<Json>,
    pub validation: Option<Json>,
    #[serde(skip_serializing)]
    pub presets: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub fields: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::directus_roles::Entity",
        from = "Column::Role",
        to = "super::directus_roles::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    DirectusRoles,
}

impl Related<super::directus_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DirectusRoles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
